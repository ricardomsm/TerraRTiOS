// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TerraRTiOS
import Combine
import CoreBluetooth
import Foundation
import Swift
import SwiftUI
@_exported import TerraRTiOS
import _Concurrency
public struct HeartBeatIntervalPayload : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct HeartBeatInterval : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public enum TerraError : Swift.Error {
  case UnknownOpcode
  case FeatureNotSupported
  case DataTypeNotSupportedForDevice
  case DeviceNotConnected
  case UnknownDevice
  public static func == (a: TerraRTiOS.TerraError, b: TerraRTiOS.TerraError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DataTypes {
  case HEART_RATE
  case ECG
  case STEPS
  case HRV
  case CALORIES
  case LOCATION
  case SPEED
  public static func == (a: TerraRTiOS.DataTypes, b: TerraRTiOS.DataTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class GattAttributes {
  public func lookup(_ name: Swift.String) -> CoreBluetooth.CBUUID?
  public func dataName(_ cbuuid: CoreBluetooth.CBUUID) -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraBLE {
  @objc deinit
}
extension SwiftUI.Color {
  public static var border: SwiftUI.Color {
    get
  }
  public static var background: SwiftUI.Color {
    get
  }
  public static var button: SwiftUI.Color {
    get
  }
  public static var inverse: SwiftUI.Color {
    get
  }
  public static var accent: SwiftUI.Color {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct TerraBLEWidget : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(bleManager: TerraRTiOS.TerraBLE, callback: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10TerraRTiOS0A9BLEWidgetV4bodyQrvp", 0) __
}
public struct TokenPayload : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public func generateToken(devId: Swift.String, xAPIKey: Swift.String, userId: Swift.String) -> TerraRTiOS.TokenPayload?
public enum Opcode {
  case HEARTRATE
  case HEARTBEAT_ACK
  case HELLO
  case IDENTIFY
  case READY
  case DISPATCH
  case SUBMIT
  case REPLAY
  public func getValue() -> Swift.Int
  public static func == (a: TerraRTiOS.Opcode, b: TerraRTiOS.Opcode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GatewaySendPayload : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public class TerraRT {
  public init(devId: Swift.String, xAPIKey: Swift.String, userId: Swift.String, referenceId: Swift.String? = nil)
  public func initConnection(type: TerraRTiOS.Connections)
  public func startBluetoothScan(type: TerraRTiOS.Connections, callback: @escaping (Swift.Bool) -> Swift.Void = {_ in}) -> TerraRTiOS.TerraBLEWidget?
  public func stopRealtime(type: TerraRTiOS.Connections)
  public func startRealtime(type: TerraRTiOS.Connections, dataType: Swift.Set<TerraRTiOS.DataTypes>)
  public func disconnect(type: TerraRTiOS.Connections)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DeviceList : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum Connections {
  case BLE
  public static func == (a: TerraRTiOS.Connections, b: TerraRTiOS.Connections) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Identify : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IdentifyPayload : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class WebSocketManager {
  public init(xAPIKey: Swift.String, devId: Swift.String, userId: Swift.String)
  public func openConnection()
  public func closeConnection()
  public func sendData(payload: TerraRTiOS.DataPayload, type: Swift.String)
  @objc deinit
}
public struct Device : Swift.Identifiable {
  public init(deviceName: Swift.String, deviceUUID: Swift.String)
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
public struct DataPayload : Swift.Codable {
  public init(ts: Swift.String, val: Swift.Double, d: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension TerraRTiOS.TerraError : Swift.Equatable {}
extension TerraRTiOS.TerraError : Swift.Hashable {}
extension TerraRTiOS.DataTypes : Swift.Equatable {}
extension TerraRTiOS.DataTypes : Swift.Hashable {}
extension TerraRTiOS.Opcode : Swift.Equatable {}
extension TerraRTiOS.Opcode : Swift.Hashable {}
extension TerraRTiOS.Connections : Swift.Equatable {}
extension TerraRTiOS.Connections : Swift.Hashable {}
